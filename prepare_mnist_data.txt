# 2.2 - set up data pipiline
def prepare_mnist_data(mnist):
    # map from uint8 to tf.float
    mnist = mnist.map(lambda img, target: (tf.cast(img, tf.float32), (tf.cast(target, tf.float32))))

    # flatten input
    mnist = mnist.map(lambda img, target: (tf.reshape(img, (-1, )), target))
    
    # normalize input to gaussian distribution or divide by 128
    mnist = mnist.map(lambda img, target: (((img/128)-1), target))

    # zip two images together
    a = mnist.take(30000)
    b = mnist.skip(30000).take(30000)
    #a, b = tf.split(mnist, 2, 1)
    #a = mnist.shard(num_shards=2, index=0)
    #b = mnist.shard(num_shards=2, index=1)
    mnist = tf.data.Dataset.zip((a,b))

    # create target for subtask 1
    mnist = mnist.map(lambda img1, target1, img2, target2: ((img1, img2), target1+target2>=5))

    # keep the progess in memory
    mnist = mnist.cache()
    mnist = mnist.shuffle(1000) 
    mnist = mnist.batch(32) # 32 image in one batch
    mnist = mnist.prefetch(20) # prepare 20 next datapoints 

    return mnist